[gd_scene load_steps=9 format=2]

[ext_resource path="res://EXTERNAL/Planets/Planet.tscn" type="PackedScene" id=1]
[ext_resource path="res://EXTERNAL/Planets/LandMasses/PlanetUnder.shader" type="Shader" id=2]
[ext_resource path="res://EXTERNAL/Planets/IceWorld/IceWorld.gd" type="Script" id=3]
[ext_resource path="res://EXTERNAL/Planets/LandMasses/Clouds.shader" type="Shader" id=4]

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 2 )
shader_param/pixels = 100.0
shader_param/rotation = 0.0
shader_param/light_origin = Vector2( 0.3, 0.3 )
shader_param/time_speed = 0.25
shader_param/dither_size = 2.0
shader_param/light_border_1 = 0.48
shader_param/light_border_2 = 0.632
shader_param/color1 = Color( 0.980392, 1, 1, 1 )
shader_param/color2 = Color( 0.780392, 0.831373, 0.882353, 1 )
shader_param/color3 = Color( 0.572549, 0.560784, 0.721569, 1 )
shader_param/size = 8.0
shader_param/OCTAVES = 2
shader_param/seed = 1.036
shader_param/time = 0.0
shader_param/should_dither = true

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float pixels : hint_range(10,100);
uniform float rotation : hint_range(0.0, 6.28) = 0.0;
uniform vec2 light_origin = vec2(0.39, 0.39);
uniform float time_speed : hint_range(-2.0, 3.0) = 0.2;
uniform float light_border_1 : hint_range(0.0, 1.0) = 0.4;
uniform float light_border_2 : hint_range(0.0, 1.0) = 0.5;
uniform float lake_cutoff : hint_range(0.0, 1.0);

uniform vec4 color1 : hint_color;
uniform vec4 color2 : hint_color;
uniform vec4 color3 : hint_color;

uniform float size = 50.0;
uniform int OCTAVES : hint_range(0, 20, 1);
uniform float seed: hint_range(1, 10);
uniform float time = 0.0;


float rand(vec2 coord) {
	coord = mod(coord, vec2(2.0,1.0)*round(size));
	return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 43758.5453 * seed);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
		
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES ; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

vec2 spherify(vec2 uv) {
	vec2 centered= uv *2.0-1.0;
	float z = sqrt(1.0 - dot(centered.xy, centered.xy));
	vec2 sphere = centered/(z + 1.0);
	return sphere * 0.5+0.5;
}

vec2 rotate(vec2 coord, float angle){
	coord -= 0.5;
	coord *= mat2(vec2(cos(angle),-sin(angle)),vec2(sin(angle),cos(angle)));
	return coord + 0.5;
}

void fragment() {
	// pixelize uv
	vec2 uv = floor(UV*pixels)/pixels;
	
	float d_light = distance(uv , light_origin);
	
	// give planet a tilt
	uv = rotate(uv, rotation);

//	// map to sphere
	uv = spherify(uv);
	
	// some scrolling noise for landmasses
	float fbm1 = fbm(uv*size+vec2(time*time_speed,0.0));
	float lake = fbm(uv*size+vec2(time*time_speed,0.0));
	
	// increase contrast on d_light
	d_light = pow(d_light, 2.0)*0.4;
	d_light -= d_light * lake;

	
	vec4 col = color1;
	if (d_light > light_border_1) {
		col = color2;
	}
	if (d_light > light_border_2) {
		col = color3;
	}
	
	float a = step(lake_cutoff, lake);
	a *= step(distance(vec2(0.5), uv), 0.5);
	COLOR = vec4(col.rgb, a * col.a);
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/pixels = 100.0
shader_param/rotation = 0.0
shader_param/light_origin = Vector2( 0.3, 0.3 )
shader_param/time_speed = 0.2
shader_param/light_border_1 = 0.024
shader_param/light_border_2 = 0.047
shader_param/lake_cutoff = 0.55
shader_param/color1 = Color( 0.309804, 0.643137, 0.721569, 1 )
shader_param/color2 = Color( 0.298039, 0.407843, 0.521569, 1 )
shader_param/color3 = Color( 0.227451, 0.247059, 0.368627, 1 )
shader_param/size = 10.0
shader_param/OCTAVES = 3
shader_param/seed = 1.14
shader_param/time = 0.0

[sub_resource type="ShaderMaterial" id=4]
shader = ExtResource( 4 )
shader_param/pixels = 100.0
shader_param/rotation = 0.0
shader_param/cloud_cover = 0.546
shader_param/light_origin = Vector2( 0.3, 0.3 )
shader_param/time_speed = 0.1
shader_param/stretch = 2.5
shader_param/cloud_curve = 1.3
shader_param/light_border_1 = 0.566
shader_param/light_border_2 = 0.781
shader_param/base_color = Color( 0.882353, 0.94902, 1, 1 )
shader_param/outline_color = Color( 0.752941, 0.890196, 1, 1 )
shader_param/shadow_base_color = Color( 0.368627, 0.439216, 0.647059, 1 )
shader_param/shadow_outline_color = Color( 0.25098, 0.286275, 0.45098, 1 )
shader_param/size = 4.0
shader_param/OCTAVES = 4
shader_param/seed = 1.14
shader_param/time = 0.0

[node name="Planet" instance=ExtResource( 1 )]
margin_right = -1180.0
margin_bottom = -500.0
rect_min_size = Vector2( 100, 100 )
script = ExtResource( 3 )

[node name="PlanetUnder" type="ColorRect" parent="." index="0"]
material = SubResource( 1 )
margin_right = 100.0
margin_bottom = 100.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Lakes" type="ColorRect" parent="." index="1"]
visible = false
material = SubResource( 3 )
margin_right = 100.0
margin_bottom = 100.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Clouds" type="ColorRect" parent="." index="2"]
material = SubResource( 4 )
margin_right = 100.0
margin_bottom = 100.0
__meta__ = {
"_edit_use_anchors_": false
}
