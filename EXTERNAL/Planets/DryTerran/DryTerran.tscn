[gd_scene load_steps=7 format=2]

[ext_resource path="res://EXTERNAL/Planets/Planet.tscn" type="PackedScene" id=1]
[ext_resource path="res://EXTERNAL/Planets/DryTerran/DryTerran.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float pixels : hint_range(10,100);
uniform float rotation : hint_range(0.0, 6.28) = 0.0;
uniform vec2 light_origin = vec2(0.39, 0.39);
uniform float light_distance1 = 0.5;
uniform float light_distance2 = 0.75;
uniform float time_speed : hint_range(0.0, 1.0) = 0.2;
uniform float dither_size : hint_range(0.0, 10.0) = 2.0;
uniform sampler2D colors;
uniform float size = 50.0;
uniform int OCTAVES : hint_range(0, 20, 1);
uniform float seed: hint_range(1, 10);
uniform float time = 0.0;
uniform bool should_dither = true;

float rand(vec2 coord) {
	// land has to be tiled
	// tiling only works for integer values, thus the rounding
	// it would probably be better to only allow integer sizes
	// multiply by vec2(2,1) to simulate planet having another side
	coord = mod(coord, vec2(2.0,1.0)*round(size));
	return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 43758.5453 * seed);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);
	
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES ; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

bool dither(vec2 uv1, vec2 uv2) {
	return mod(uv1.x+uv2.y,2.0/pixels) <= 1.0 / pixels;
}

vec2 rotate(vec2 coord, float angle){
	coord -= 0.5;
	coord *= mat2(vec2(cos(angle),-sin(angle)),vec2(sin(angle),cos(angle)));
	return coord + 0.5;
}

vec2 spherify(vec2 uv) {
	vec2 centered= uv *2.0-1.0;
	float z = sqrt(1.0 - dot(centered.xy, centered.xy));
	vec2 sphere = centered/(z + 1.0);
	return sphere * 0.5+0.5;
}


void fragment() {
	//pixelize uv
	vec2 uv = floor(UV*pixels)/pixels;
	bool dith = dither(uv, UV);
	
	// cut out a circle
	float d_circle = distance(uv, vec2(0.5));
	float a = step(d_circle, 0.49999);
	
	uv = spherify(uv);
	
	// check distance distance to light
	float d_light = distance(uv , vec2(light_origin));
	
	uv = rotate(uv, rotation);
	
	// noise
	float f = fbm(uv*size+vec2(time*time_speed, 0.0));
	
	// remap light
	d_light = smoothstep(-0.3, 1.2, d_light);
	
	if (d_light < light_distance1) {
		d_light *= 0.9;
	}
	if (d_light < light_distance2) {
		d_light *= 0.9;
	}
	
	
	float c = d_light*pow(f,0.8)*3.5; // change the magic nums here for different light strengths
	
	// apply dithering
	if (dith || !should_dither) {
		c += 0.02;
		c *= 1.05;
	}
	
	// now we can assign colors based on distance to light origin
	float posterize = floor(c*4.0)/4.0;
	vec4 col = texture(colors, vec2(posterize, 0.0));
	
	COLOR = vec4(col.rgb, a * col.a);
}
"

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0, 0.25, 0.5, 0.75, 1 )
colors = PoolColorArray( 1, 0.537255, 0.2, 1, 0.901961, 0.270588, 0.223529, 1, 0.678431, 0.184314, 0.270588, 1, 0.321569, 0.2, 0.247059, 1, 0.239216, 0.160784, 0.211765, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/pixels = 100.0
shader_param/rotation = 0.0
shader_param/light_origin = Vector2( 0.4, 0.3 )
shader_param/light_distance1 = 0.362
shader_param/light_distance2 = 0.525
shader_param/time_speed = 0.1
shader_param/dither_size = 2.0
shader_param/size = 8.0
shader_param/OCTAVES = 3
shader_param/seed = 1.175
shader_param/time = 0.0
shader_param/should_dither = true
shader_param/colors = SubResource( 3 )

[node name="DryTerran" instance=ExtResource( 1 )]
margin_right = -1180.0
margin_bottom = -500.0
rect_min_size = Vector2( 100, 100 )
size_flags_horizontal = 4
size_flags_vertical = 4
script = ExtResource( 2 )

[node name="Land" type="ColorRect" parent="." index="0"]
material = SubResource( 4 )
margin_right = 100.0
margin_bottom = 100.0
__meta__ = {
"_edit_use_anchors_": false
}
